clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
ResultDistances=getDistanceDataFrame(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceUN_EM(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(10000L,1000L,10L)
boxplot(ResultDistances$DistanceListFromEM)
hist(ResultDistances$DistanceListFromEM)
boxplot(ResultDistances$DistanceListFromUN)
hist(ResultDistances$DistanceListFromUN)
print(median(ResultDistances$DistanceListFromEM))
print(median(ResultDistances$DistanceListFromUN))
print(mean(ResultDistances$DistanceListFromEM))
print(mean(ResultDistances$DistanceListFromUN))
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
ResultDistances=getDistanceDataFrame(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceUN_EM(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(10000L,1000L,10L)
boxplot(ResultDistances$DistanceListFromEM)
hist(ResultDistances$DistanceListFromEM)
boxplot(ResultDistances$DistanceListFromUN)
hist(ResultDistances$DistanceListFromUN)
print(median(ResultDistances$DistanceListFromEM))
print(median(ResultDistances$DistanceListFromUN))
print(mean(ResultDistances$DistanceListFromEM))
print(mean(ResultDistances$DistanceListFromUN))
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
ResultDistances=getDistanceDataFrame(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceUN_EM(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(10000L,1000L,10L)
boxplot(ResultDistances$DistanceListFromEM)
hist(ResultDistances$DistanceListFromEM)
boxplot(ResultDistances$DistanceListFromUN)
hist(ResultDistances$DistanceListFromUN)
print(median(ResultDistances$DistanceListFromEM))
print(median(ResultDistances$DistanceListFromUN))
print(mean(ResultDistances$DistanceListFromEM))
print(mean(ResultDistances$DistanceListFromUN))
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
ResultDistances=getDistanceDataFrame(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceUN_EM(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(10000L,1000L,10L)
boxplot(ResultDistances$DistanceListFromEM)
hist(ResultDistances$DistanceListFromEM)
boxplot(ResultDistances$DistanceListFromUN)
hist(ResultDistances$DistanceListFromUN)
print(median(ResultDistances$DistanceListFromEM))
print(median(ResultDistances$DistanceListFromUN))
print(mean(ResultDistances$DistanceListFromEM))
print(mean(ResultDistances$DistanceListFromUN))
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
ResultDistances=getDistanceDataFrame(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceUN_EM(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(10000L,1000L,10L)
boxplot(ResultDistances$DistanceListFromEM)
hist(ResultDistances$DistanceListFromEM)
boxplot(ResultDistances$DistanceListFromUN)
hist(ResultDistances$DistanceListFromUN)
print(median(ResultDistances$DistanceListFromEM))
print(median(ResultDistances$DistanceListFromUN))
print(mean(ResultDistances$DistanceListFromEM))
print(mean(ResultDistances$DistanceListFromUN))
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
2……3
2^3
0.8^(1:poolSize)
poolSize=10000
0.8^(1:poolSize)
a=1:3
b=2:4
max(a,b)
rep(0,10)
rep(1e-7,10)
1e-3
DistributionOfClonotypes=0.8^(1:poolSize)
minimum_bound=rep(1e-7,poolSize)
DistributionOfClonotypes <- pmin(DistributionOfClonotypes, minimum_bound)
DistributionOfClonotypes
DistributionOfClonotypes=0.8^(1:poolSize)
minimum_bound=rep(1e-7,poolSize)
DistributionOfClonotypes <- pmax(DistributionOfClonotypes, minimum_bound)
DistributionOfClonotypes
