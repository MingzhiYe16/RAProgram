setAlpha <- hashset()
setBeta <- hashset()
if (numberA>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[2]]][1,])
insert(setAlpha,indexInPool[2])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][1,])
insert(setAlpha,indexInPool[1])
}
numberA=numberA-1
}
if (numberB>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[3]]][2,])
insert(setBeta,indexInPool[3])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][2,])
insert(setBeta,indexInPool[1])
}
numberB=numberB-1
}
while(numberA>0){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
while(setAlpha[indexInPool]==TRUE){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
}
insert(setAlpha,indexInPool)
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
while(numberB>0){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
while(setBeta[indexInPool]==TRUE){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
}
insert(setBeta,indexInPool)
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
return(result)
}
getSample <- function(samplesize){
RandomIntegers <- sample(1:(length(IndexnAnBMap)/2), samplesize, replace=T)
barcode <- paste('cell', 1:samplesize)
sample <- lapply(1:samplesize, function(clonotype_index){
getClonotype(clonotype_index, IndexnAnBMap[RandomIntegers[clonotype_index],1], IndexnAnBMap[RandomIntegers[clonotype_index],2])
})
sample <- SplitDataFrameList(sample)
sample[,'barcode'] <- barcode
sample[,'sample'] <- 'sim'
names(sample) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(sample)
}
# samplelist=getSample(SampleSize)
# EMpredicted <- clonoStats(samplelist, method = 'EM')
# UNpredicted <- clonoStats(samplelist, method = 'unique')
getDistance_R<-function(clonotype,abundance){
stimulated<- data.frame(clonotype,abundance)
sum_abundance=sum(stimulated['abundance'])
stimulated['abundance']=stimulated['abundance']/sum_abundance
merged = merge(x = realDF, y = stimulated, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
return (sum(abs(merged['abundance.x']-merged['abundance.y'])))
}
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:6){
samplelist=getSample(SampleSize)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:6){
samplelist=getSample(SampleSize)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
samplelist=getSample(SampleSize)
EMpredicted <- clonoStats(samplelist, method = 'EM')
samplelist
samplelist[[1]]
sce0$contigs[[4]]
sce0$contigs[[4]][c(2,1),]
sce0$contigs[[1]]
sce0$contigs[[2]]
sce0$contigs[[2]]$barcode
samplelist[[1]]
samplelist <- lapply(1:poolSize, function(clonotype_index){
getEmptyClonotypeForPool(clonotype_index)
}
)
getEmptyClonotypeForPool<-function(clonotype_index){
result=sce0$contigs[[1]]
return(result)
}
getEmptyClonotypeForPool<-function(clonotype_index){
result=sce0$contigs[[1]]
return(result)
}
sampleEmpty <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index)}
)
getEmptyClonotypeForPool<-function(clonotype_index){
result=sce0$contigs[[1]]
return(result)
}
sampleEmpty <- lapply(1:poolSize, function(clonotype_index){
getEmptyClonotypeForPool(clonotype_index)}
)
sampleEmpty
samplelist=sampleEmpty
EMpredicted <- clonoStats(samplelist, method = 'EM')
samplelist
UNpredicted <- clonoStats(samplelist, method = 'unique')
samplelist=getSample(SampleSize)
UNpredicted <- clonoStats(samplelist, method = 'unique')
samplelist
IndexnAnBMap=read.csv("IndexnAnBMap.csv",header = F)
IndexnAnBMap=as.matrix(IndexnAnBMap)
samplelist=getSample(SampleSize)
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
sample=getSample()
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
samplelist
length(samplelist)
sample
length(sample)
length(sample[1,])
length(sample[,1])
sample=getSample()
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
length(samplelist)
samplelist[[1705]]
samplelist[[1706]]
samplelist[[1704]]
samplelist[[1703]]
samplelist[[1000]]
samplelist[[100]]
samplelist[[101]]
sample$barcode
a=sample$barcode
unique(a)
length(unique(a))
a=unique(a)
tail(a)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:20){
sample=getSample()
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:3){
sample=getSample()
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:2){
sample=getSample()
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
boxplot(DistanceListFromUN)
hist(DistanceListFromUN)
print(median(DistanceListFromEM))
print(median(DistanceListFromUN))
print(mean(DistanceListFromEM))
print(mean(DistanceListFromUN))
n
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:1){
sample=getSample()
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
boxplot(DistanceListFromUN)
hist(DistanceListFromUN)
print(median(DistanceListFromEM))
print(median(DistanceListFromUN))
print(mean(DistanceListFromEM))
print(mean(DistanceListFromUN))
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:1){
sample=getSample()
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
boxplot(DistanceListFromUN)
hist(DistanceListFromUN)
print(median(DistanceListFromEM))
print(median(DistanceListFromUN))
print(mean(DistanceListFromEM))
print(mean(DistanceListFromUN))
a=rgeom(3000, .25)
min(a)
a=rgeom(3000, .25)+1
min(a)
rep(2,1)
MapRandomIntToIndex=rgeom(poolSize, .25)+1
poolSize=2000
MapRandomIntToIndex=rgeom(poolSize, .25)+1
getRep <- function(x){
return(rep(x,MapRandomIntToIndex[x]))
}
MapRandomIntToIndex=sapply(1:poolSize,getRep,simplify = TRUE)
MapRandomIntToIndex
class(MapRandomIntToIndex)
class(MapRandomIntToIndex[1])
MapRandomIntToIndex[1]
a=rep(2,2)
class(a)
class(MapRandomIntToIndex[[1]])
class(MapRandomIntToIndex[1])
MapRandomIntToIndex
unlist(MapRandomIntToIndex)
knitr::opts_chunk$set(echo = TRUE)
MapRandomIntToIndex=rgeom(poolSize, .25)+1
getRep <- function(x){
return(rep(x,MapRandomIntToIndex[x]))
}
MapRandomIntToIndex=sapply(1:poolSize,getRep,simplify = TRUE)
MapRandomIntToIndex=unlist(MapRandomIntToIndex)
sample.int(poolSize, 3, replace=FALSE)
indexInPool=sample.int(poolSize, 3, replace=FALSE)
MapRandomIntToIndex[indexInPool]
indexInPool=sample.int(poolSize, 3, replace=FALSE)
MapRandomIntToIndex[indexInPool]
MapRandomIntToIndex=rgeom(poolSize, .25)+1
poolSize=2000
SampleSize=5000
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
IndexnAnBMap=read.csv("IndexnAnBMap.csv",header = F)
IndexnAnBMap=as.matrix(IndexnAnBMap)
sce0 <- readRDS('toyTCRdata.rds')
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
MapRandomIntToIndex=rgeom(poolSize, .25)+1
getRep <- function(x){
return(rep(x,MapRandomIntToIndex[x]))
}
MapRandomIntToIndex=sapply(1:poolSize,getRep,simplify = TRUE)
MapRandomIntToIndex=unlist(MapRandomIntToIndex)
MapLength=length(MapRandomIntToIndex)
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(poolSize)
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
abundance=rep(1/poolSize,poolSize)
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool ), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
getClonotype<-function(clonotype_index, numberA, numberB, errorProb = .01){
result=DataFrame()
indexInPool=sample.int(MapLength, 3, replace=FALSE)
indexInPool=MapRandomIntToIndex[indexInPool]
setAlpha <- hashset()
setBeta <- hashset()
if (numberA>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[2]]][1,])
insert(setAlpha,indexInPool[2])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][1,])
insert(setAlpha,indexInPool[1])
}
numberA=numberA-1
}
if (numberB>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[3]]][2,])
insert(setBeta,indexInPool[3])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][2,])
insert(setBeta,indexInPool[1])
}
numberB=numberB-1
}
while(numberA>0){
indexInPool=sample.int(MapLength, 1, replace=TRUE)
indexInPool=MapRandomIntToIndex[indexInPool]
while(setAlpha[indexInPool]==TRUE){
indexInPool=sample.int(MapLength, 1, replace=TRUE)
indexInPool=MapRandomIntToIndex[indexInPool]
}
insert(setAlpha,indexInPool)
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
while(numberB>0){
indexInPool=sample.int(MapLength, 1, replace=TRUE)
indexInPool=MapRandomIntToIndex[indexInPool]
while(setBeta[indexInPool]==TRUE){
indexInPool=sample.int(MapLength, 1, replace=TRUE)
indexInPool=MapRandomIntToIndex[indexInPool]
}
insert(setBeta,indexInPool)
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
return(result)
}
getSample <- function(samplesize){
RandomIntegers <- sample(1:(length(IndexnAnBMap)/2), samplesize, replace=T)
barcode <- paste('cell', 1:samplesize)
sample <- lapply(1:samplesize, function(clonotype_index){
getClonotype(clonotype_index, IndexnAnBMap[RandomIntegers[clonotype_index],1], IndexnAnBMap[RandomIntegers[clonotype_index],2])
})
sample <- SplitDataFrameList(sample)
sample[,'barcode'] <- barcode
sample[,'sample'] <- 'sim'
names(sample) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(sample)
}
# samplelist=getSample(SampleSize)
# EMpredicted <- clonoStats(samplelist, method = 'EM')
# UNpredicted <- clonoStats(samplelist, method = 'unique')
getDistance_R<-function(clonotype,abundance){
stimulated<- data.frame(clonotype,abundance)
sum_abundance=sum(stimulated['abundance'])
stimulated['abundance']=stimulated['abundance']/sum_abundance
merged = merge(x = realDF, y = stimulated, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
return (sum(abs(merged['abundance.x']-merged['abundance.y'])))
}
time0=Sys.time()
samplelist=getSample(5000)
time1=Sys.time()
print(time1-time0)
EMpredicted <- clonoStats(samplelist, method = 'EM')
time2=Sys.time()
print(time2-time1)
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
time3=Sys.time()
print(time3-time2)
UNpredicted <- clonoStats(samplelist, method = 'unique')
time4=Sys.time()
print(time4-time3)
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
time5=Sys.time()
print(time5-time4)
distance1
distance2
