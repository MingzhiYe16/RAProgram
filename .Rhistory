# for (i in 1:length(sce0$contigs)){
#   #sce0$contigs[[i]]  "DFrame"  "S4Vectors"
#   #sce0$contigs[[i]]<-sce0$contigs[[i]] %>% filter(chain %in% c("TRA","TRB"))
#   #sce0$contigs[[i]]<-sce0$contigs[[i]][filter(sce0$contigs[[i]]$chain %in% c("TRA","TRB")),]
#   sce0$contigs[[i]]<-sce0$contigs[[i]][order(sce0$contigs[[i]]$chain),]
#
# }
poolSize=30000
SampleSize=50000
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(poolSize)
samplePool
sample=read.csv("sample.csv", header = TRUE, sep = ",")
sample=read.csv("sample.csv", header = TRUE, sep = ",")
getwdw
getwd
getwd()
setwd("C:/Users/yemin/R_Projects/RAprogram")
sample=read.csv("sample.csv", header = TRUE, sep = ",")
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
# metadata(sce)$clonoStats
# clonoAbundance(sce)
# clonoFrequency(sce)
# EMstats <- clonoStats(sce, method = "EM")
#
# EMstats2=metadata(EMstats)$clonoStats
# barVDJ(EMstats2, title = "contigs", legend = TRUE)
# abundanceVDJ(EMstats2)
sample=read.csv("sample.csv", header = TRUE, sep = ",")
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
clonoStats(samplelist, method = 'EM')
clonoStats(samplelist, method = 'unique')
clonotypes_in_pool=1:poolSize
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
# metadata(sce)$clonoStats
# clonoAbundance(sce)
# clonoFrequency(sce)
# EMstats <- clonoStats(sce, method = "EM")
#
# EMstats2=metadata(EMstats)$clonoStats
# barVDJ(EMstats2, title = "contigs", legend = TRUE)
# abundanceVDJ(EMstats2)
sce0 <- readRDS('toyTCRdata.rds')
sce <- clonoStats(sce0, method = 'EM')
#A<-sce0$contigs[sce0$contigs[, 'chain'] %in% c('TRA','TRB')]
# for (i in 1:length(sce0$contigs)){
#   #sce0$contigs[[i]]  "DFrame"  "S4Vectors"
#   #sce0$contigs[[i]]<-sce0$contigs[[i]] %>% filter(chain %in% c("TRA","TRB"))
#   #sce0$contigs[[i]]<-sce0$contigs[[i]][filter(sce0$contigs[[i]]$chain %in% c("TRA","TRB")),]
#   sce0$contigs[[i]]<-sce0$contigs[[i]][order(sce0$contigs[[i]]$chain),]
#
# }
poolSize=2000
SampleSize=5000
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
clonotypes_in_pool=1:poolSize
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
clonotypes_in_pool[clonotype_index]=paste(CDRAlpha,CDRBeta,sep=' ')
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(poolSize)
clonotypes_in_pool
poolSize=2000
SampleSize=5000
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
clonotypes_in_pool=character(poolSize)
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
clonotypes_in_pool[clonotype_index]=paste(CDRAlpha,CDRBeta,sep=' ')
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(poolSize)
clonotypes_in_pool
clonotypes_in_pool[1]
clonotypes_in_pool[1]='asd'
clonotypes_in_pool[1]
clonotypes_in_pool
CDR_Alpha
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
CDR_Alpha
CDR_Alpha+CDR_Beta
paste(CDRAlpha,CDRBeta,sep=' ')
paste(CDR_Alpha,CDR_Beta,sep=' ')
poolSize=2000
SampleSize=5000
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
clonotypes_in_pool[clonotype_index]=paste(CDRAlpha,CDRBeta,sep=' ')
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
clonotypes_in_pool=paste(CDR_Alpha,CDR_Beta,sep=' ')
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool,clonotypes_in_pool)
}
samplePool,clonotypes_in_pool=getSamplePool(poolSize)
poolSize=2000
SampleSize=5000
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
clonotypes_in_pool[clonotype_index]=paste(CDRAlpha,CDRBeta,sep=' ')
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
clonotypes_in_pool=character(poolSize)
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
clonotypes_in_pool=paste(CDR_Alpha,CDR_Beta,sep=' ')
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(poolSize)
clonotypes_in_pool
poolSize=2000
SampleSize=5000
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
clonotypes_in_pool[clonotype_index]=paste(CDRAlpha,CDRBeta,sep=' ')
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
clonotypes_in_pool=character(poolSize)
getSamplePool <- function(poolSize,clonotypes_in_pool){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
clonotypes_in_pool=paste(CDR_Alpha,CDR_Beta,sep=' ')
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(poolSize,clonotypes_in_pool)
clonotypes_in_pool
samplePool
samplePool[,'cdr3']
samplePool[,'cdr3'][1]
clonotypes_in_pool=samplePool[,'cdr3']
clonotypes_in_pool
clonotypes_in_pool[1]
clonotypes_in_pool[1][2]
clonotypes_in_pool[1][1]
clonotypes_in_pool[1][1][1]
clonotypes_in_pool[[1]]
clonotypes_in_pool[[1]][1]
clonotypes_in_pool[1,]
clonotypes_in_pool[,1]
class(clonotypes_in_pool[[1]])
a=unlist(clonotypes_in_pool)
a
a[1]
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
return res
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
return res
x=c('asd',as)
x=c('asd','as')
x
class(x)
paste(x[1],x[2],sep=' ')
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool.concatCDR3)
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool
clonotypes_in_pool=unlist(clonotypes_in_pool)
clonotypes_in_pool
row.names(clonotypes_in_pool) <- NULL
clonotypes_in_pool
clonotypes_in_pool[1]
class(clonotypes_in_pool)
a
a=c('as','as')
class(a)
clonotypes_in_pool
rep(1,2)
abundance=rep(1/poolSize,poolSize)
abundance
realDF<- data.frame(clonotypes_in_pool,abundance)
realDF
rownames(realDF) <- NULL
realDF
a=aggregate(realDF$abundance, by=list(Category=realDF$clonotypes_in_pool ), FUN=sum)
a
head(a)
a=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool ), FUN=sum)
head(a)
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool ), FUN=sum)
realDF$x
max(realDF$x)
realDF$x[1000:]
realDF$x[1000,]
colnames(realDF) <- c('clonotype','abundance')
realDF
head(realDF)
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
UNpredicted
samplelist=getSample(5000)
getSample <- function(samplesize){
sample=DataFrame()
DistributeTRA=sum(sce0$contigs[,'chain']=='TRA')
DistributeTRB=sum(sce0$contigs[,'chain']=='TRB')
# table(DistributeTRA,DistributeTRB)
IndexnAnBMap=cbind(DistributeTRA,DistributeTRB)
RandomIntegers <- sample(1:(length(IndexnAnBMap)/2), samplesize, replace=T)
barcode <- paste('cell', 1:samplesize)
sample <- lapply(1:samplesize, function(clonotype_index){
getClonotype(clonotype_index, IndexnAnBMap[RandomIntegers[clonotype_index],1], IndexnAnBMap[RandomIntegers[clonotype_index],2])
})
sample <- SplitDataFrameList(sample)
sample[,'barcode'] <- barcode
sample[,'sample'] <- 'sim'
names(sample) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(sample)
}
# samplelist=getSample(SampleSize)
# EMpredicted <- clonoStats(samplelist, method = 'EM')
# UNpredicted <- clonoStats(samplelist, method = 'unique')
samplelist=getSample(5000)
getClonotype<-function(clonotype_index, numberA, numberB, errorProb = .01){
result=DataFrame()
indexInPool=sample.int(poolSize, 3, replace=FALSE)
setAlpha <- hashset()
setBeta <- hashset()
if (numberA>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[2]]][1,])
insert(setAlpha,indexInPool[2])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][1,])
insert(setAlpha,indexInPool[1])
}
numberA=numberA-1
}
if (numberB>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[3]]][2,])
insert(setBeta,indexInPool[3])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][2,])
insert(setBeta,indexInPool[1])
}
numberB=numberB-1
}
while(numberA>0){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
while(setAlpha[indexInPool]==TRUE){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
}
insert(setAlpha,indexInPool)
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
while(numberB>0){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
while(setBeta[indexInPool]==TRUE){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
}
insert(setBeta,indexInPool)
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
return(result)
}
samplelist=getSample(5000)
samplelist=getSample(500)
EMpredicted <- clonoStats(samplelist, method = 'EM')
clonotype=clonoNames(EMpredicted)
abundance=clonoAbundance(EMpredicted)[,1]
stimulated<- data.frame(clonotype,abundance)
stimulated
head(stimulated)
df = merge(x = realDF, y = stimulated, by = "clonotype",
all = TRUE)
df
head(df)
merged[is.na(merged)] <- 0
merged = merge(x = realDF, y = stimulated, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
merged
head(merged)
sum_abundance=sum(stimulated['abundance'])
sum_abundance
stimulated
stimulated['abundance']=stimulated['abundance']/sum_abundance
stimulated['abundance']
merged = merge(x = realDF, y = stimulated, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
merged
head(merged)
sum(abs(merged['abundance.x']-merged['abundance.y']))
getDistance_R<-function(clonotype,abundance){
stimulated<- data.frame(clonotype,abundance)
sum_abundance=sum(stimulated['abundance'])
stimulated['abundance']=stimulated['abundance']/sum_abundance
merged = merge(x = realDF, y = stimulated, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
return (sum(abs(merged['abundance.x']-merged['abundance.y'])))
}
time0=Sys.time()
samplelist=getSample(5000)
time1=Sys.time()
print(time1-time0)
EMpredicted <- clonoStats(samplelist, method = 'EM')
time2=Sys.time()
print(time2-time1)
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
time3=Sys.time()
print(time3-time2)
UNpredicted <- clonoStats(samplelist, method = 'unique')
time4=Sys.time()
print(time4-time3)
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
time5=Sys.time()
print(time5-time4)
sample=DataFrame()
DistributeTRA=sum(sce0$contigs[,'chain']=='TRA')
DistributeTRB=sum(sce0$contigs[,'chain']=='TRB')
# table(DistributeTRA,DistributeTRB)
IndexnAnBMap=cbind(DistributeTRA,DistributeTRB)
IndexnAnBMap
CLASS(IndexnAnBMap)
class(IndexnAnBMap)
object=read.csv(IndexnAnBMap.csv)
object=read.csv("IndexnAnBMap.csv")
object
class(object)
object=read.csv("IndexnAnBMap.csv",header = F)
head(object)
IndexnAnBMap
a=as.matrix(object)
head(a)
a
a[10]
a[10,]
a[10,1]
a[,1]
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
sce0 <- readRDS('toyTCRdata.rds')
sce0$contigs[[4]][c(2,1),]
