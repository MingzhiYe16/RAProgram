getPoisson<-function(){
a=-1
while(a<0 | a>4){
a=rpois(1, 1)
}
return(a)
}
getPoisson
getPoisson()
getPoisson()
getPoisson()
a=getPoisson()
a
a[1]
a[[1]]
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1, 1)
rpois(1)
runif(1, 1, 141)
runif(1, 1, 141)
runif(1, 1, 141)
runif(1, 1, 141)
sample.int(141, 10)
sample.int(1, 10)
sample.int(2, 10)
sample.int(2, 10, replace=TRUE)
sample.int(2, replace=TRUE)
sample.int(4, replace=TRUE)
sample.int(141, 1, replace=TRUE)
sample.int(141, 1, replace=TRUE)
samplePool[[1]]
samplePool[[1]][1,]
class(samplePool[[1]][1,])
class(samplePool[[1]])
a=DFrame()
a=DataFrame()
a
rbind(a,samplePool[[1]])
a=rbind(a,samplePool[[1]])
class(a)
getPoisson<-function(){
a=-1
while(a<0 | a>4){
a=rpois(1, 1)
}
return(a)
}
getClonotype<-function(){
numberA=getPoisson()
numberB=getPoisson()
result=DataFrame()
indexInPool=sample.int(poolSize, 1, replace=TRUE)
if (numberA>=1){
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
if (numberB>=1){
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
while(numberA>0 | numberB>0){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
if (numberA>=1){
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
else{
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
}
return(result)
}
a=getClonotype()
poolSize=141
getPoisson<-function(){
a=-1
while(a<0 | a>4){
a=rpois(1, 1)
}
return(a)
}
getClonotype<-function(){
numberA=getPoisson()
numberB=getPoisson()
result=DataFrame()
indexInPool=sample.int(poolSize, 1, replace=TRUE)
if (numberA>=1){
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
if (numberB>=1){
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
while(numberA>0 | numberB>0){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
if (numberA>=1){
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
else{
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
}
return(result)
}
a=getClonotype()
a
getClonotype()
SampleSize=500
sample=DataFrame()
sample[1]=getClonotype()
SampleSize=500
sample=DataFrameList()
sample[1]=getClonotype()
sample[[1]]=getClonotype()
sample
sample[[1]]
sample[[5]]=getClonotype()
SampleSize=500
sample=DataFrameList()
for(i in 1:SampleSize){
sample[[i]]=getClonotype()
}
sample
sample[[500]]
EMstats <- clonoStats(sample, method = "EM")
class(sce0)
class(sce0$contigs)
sample
sample
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
sce0 <- readRDS('toyTCRdata.rds')
sce <- clonoStats(sce0, method = 'EM')
# metadata(sce)$clonoStats
# clonoAbundance(sce)
# clonoFrequency(sce)
# EMstats <- clonoStats(sce, method = "EM")
#
# EMstats2=metadata(EMstats)$clonoStats
# barVDJ(EMstats2, title = "contigs", legend = TRUE)
# abundanceVDJ(EMstats2)
#A<-sce0$contigs[sce0$contigs[, 'chain'] %in% c('TRA','TRB')]
for (i in 1:length(sce0$contigs)){
#sce0$contigs[[i]]  "DFrame"  "S4Vectors"
#sce0$contigs[[i]]<-sce0$contigs[[i]] %>% filter(chain %in% c("TRA","TRB"))
#sce0$contigs[[i]]<-sce0$contigs[[i]][filter(sce0$contigs[[i]]$chain %in% c("TRA","TRB")),]
sce0$contigs[[i]]<-sce0$contigs[[i]][order(sce0$contigs[[i]]$chain),]
}
samplePool=DataFrameList()
poolSize=1
for (i in 1:length(sce0$contigs)){
if(length(sce0$contigs[[i]]$chain)==2 & sce0$contigs[[i]]$chain[1]=='TRA' & sce0$contigs[[i]]$chain[2]=='TRB'){
samplePool[[poolSize]]=sce0$contigs[[i]]
poolSize=poolSize+1
}
}
poolSize=poolSize-1
getPoisson<-function(){
a=-1
while(a<0 | a>4){
a=rpois(1, 1)
}
return(a)
}
getClonotype<-function(){
numberA=getPoisson()
numberB=getPoisson()
result=DataFrame()
indexInPool=sample.int(poolSize, 1, replace=TRUE)
if (numberA>=1){
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
if (numberB>=1){
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
while(numberA>0 | numberB>0){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
if (numberA>=1){
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
else{
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
}
if(length(result$barcode)){
for(i in 1:length(result$barcode)){
result$barcode[i]=result$barcode[1]
result$sample[i]='sim'
}
}
return(result)
}
SampleSize=50
getSample<-function(samplesize){
sample=DataFrame()
for(i in 1:samplesize){
sample=rbind(sample,getClonotype())
}
samplelist<-split(sample,sample$barcode)
# sample1<-as(sample,'SplitDFrameList')
return(samplelist)
}
# samplelist=getSample(SampleSize)
# EMpredicted <- clonoStats(samplelist, method = 'EM')
#UNpredicted <- clonoStats(samplelist, method = 'unique')
TruthPercentageMap=hashmap()
for(i in 1:poolSize){
key=paste(samplePool[[i]]$cdr3[1],samplePool[[i]]$cdr3[2],sep=' ')
if(is.null(TruthPercentageMap[[key]])){
TruthPercentageMap[[key]]<-1/poolSize
}
else{
TruthPercentageMap[[key]]<-TruthPercentageMap[[key]]+1/poolSize
}
}
getDistance<-function(predicted){
clonotypes=clonoNames(predicted)
abundance=clonoAbundance(predicted)
SumAbundance=sum(abundance)
distance=0
seen <- hashmap()
for(i in 1:length(abundance)){
if(is.null(TruthPercentageMap[[clonotypes[i]]])){
distance=distance+abundance[i]/SumAbundance
}
else{
seen[[clonotypes[i]]]<-TruthPercentageMap[[clonotypes[i]]]
distance=distance+abs(abundance[i]/SumAbundance-TruthPercentageMap[[clonotypes[i]]])
}
}
distance=distance+Reduce("+", values(TruthPercentageMap)) -Reduce("+", values(seen))
return(distance)
}
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:20){
samplelist=getSample(50)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(EMpredicted)
DistanceListFromEM[i]=distance1
# UNpredicted <- clonoStats(samplelist, method = 'unique')
# distance2=getDistance(UNpredicted)
# DistanceListFromUN[i]=distance2
}
View(getClonotype)
View(getDistance)
boxplot(DistanceListFromEM)
barplot(DistanceListFromEM)
clonoNames(predicted)
samplelist=getSample(50)
EMpredicted <- clonoStats(samplelist, method = 'EM')
clonoNames(EMpredicted)
boxplot(DistanceListFromEM)
barplot(DistanceListFromEM)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
sce0 <- readRDS('toyTCRdata.rds')
sce <- clonoStats(sce0, method = 'EM')
# metadata(sce)$clonoStats
# clonoAbundance(sce)
# clonoFrequency(sce)
# EMstats <- clonoStats(sce, method = "EM")
#
# EMstats2=metadata(EMstats)$clonoStats
# barVDJ(EMstats2, title = "contigs", legend = TRUE)
# abundanceVDJ(EMstats2)
DistanceListFromEM
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
barplot(DistanceListFromEM)
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:20){
samplelist=getSample(50)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(EMpredicted)
DistanceListFromEM[i]=distance1
# UNpredicted <- clonoStats(samplelist, method = 'unique')
# distance2=getDistance(UNpredicted)
# DistanceListFromUN[i]=distance2
}
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:10){
samplelist=getSample(200)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(EMpredicted)
DistanceListFromEM[i]=distance1
# UNpredicted <- clonoStats(samplelist, method = 'unique')
# distance2=getDistance(UNpredicted)
# DistanceListFromUN[i]=distance2
}
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
devtools::install_github('kstreet13/VDJdive')
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github('kstreet13/VDJdive')
devtools::install_github('kstreet13/VDJdive')
library(VDJdive)
samplelist
EMpredicted <- clonoStats(samplelist, method = 'EM')
EMpredicted <- clonoStats(samplelist, method = 'EM')
UNpredicted <- clonoStats(samplelist, method = 'unique')
knitr::opts_chunk$set(echo = TRUE)
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
boxplot(DistanceListFromUN)
DistanceListFromUN
DistanceListFromEM
lengthï¼ˆDistanceListFromEM
)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:50){
samplelist=getSample(2000)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(EMpredicted)
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance(UNpredicted)
DistanceListFromUN[i]=distance2
print(i)
}
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
# metadata(sce)$clonoStats
# clonoAbundance(sce)
# clonoFrequency(sce)
# EMstats <- clonoStats(sce, method = "EM")
#
# EMstats2=metadata(EMstats)$clonoStats
# barVDJ(EMstats2, title = "contigs", legend = TRUE)
# abundanceVDJ(EMstats2)
sce0 <- readRDS('toyTCRdata.rds')
sce <- clonoStats(sce0, method = 'EM')
#A<-sce0$contigs[sce0$contigs[, 'chain'] %in% c('TRA','TRB')]
for (i in 1:length(sce0$contigs)){
#sce0$contigs[[i]]  "DFrame"  "S4Vectors"
#sce0$contigs[[i]]<-sce0$contigs[[i]] %>% filter(chain %in% c("TRA","TRB"))
#sce0$contigs[[i]]<-sce0$contigs[[i]][filter(sce0$contigs[[i]]$chain %in% c("TRA","TRB")),]
sce0$contigs[[i]]<-sce0$contigs[[i]][order(sce0$contigs[[i]]$chain),]
}
samplePool=DataFrameList()
poolSize=1
for (i in 1:length(sce0$contigs)){
if(length(sce0$contigs[[i]]$chain)==2 & sce0$contigs[[i]]$chain[1]=='TRA' & sce0$contigs[[i]]$chain[2]=='TRB'){
samplePool[[poolSize]]=sce0$contigs[[i]]
poolSize=poolSize+1
}
}
poolSize=poolSize-1
getPoisson<-function(){
a=-1
while(a<0 | a>4){
a=rpois(1, 1)
}
return(a)
}
getClonotype<-function(clonotype_index){
numberA=getPoisson()
numberB=getPoisson()
result=DataFrame()
indexInPool=sample.int(poolSize, 1, replace=TRUE)
if (numberA>=1){
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
if (numberB>=1){
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
while(numberA>0 | numberB>0){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
if (numberA>=1){
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
else{
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
}
if(length(result$barcode)){
new_barcode=paste(result$barcode[1],clonotype_index,sep=' ')
for(i in 1:length(result$barcode)){
#result$barcode[i]=result$barcode[1]
result$barcode[i]=new_barcode
result$sample[i]='sim'
}
}
return(result)
}
getSample<-function(samplesize){
sample=DataFrame()
for(clonotype_index in 1:samplesize){
sample=rbind(sample,getClonotype(clonotype_index))
}
samplelist<-split(sample,sample$barcode)
# sample1<-as(sample,'SplitDFrameList')
return(samplelist)
}
# samplelist=getSample(SampleSize)
# EMpredicted <- clonoStats(samplelist, method = 'EM')
# UNpredicted <- clonoStats(samplelist, method = 'unique')
TruthPercentageMap=hashmap()
for(i in 1:poolSize){
key=paste(samplePool[[i]]$cdr3[1],samplePool[[i]]$cdr3[2],sep=' ')
if(is.null(TruthPercentageMap[[key]])){
TruthPercentageMap[[key]]<-1/poolSize
}
else{
TruthPercentageMap[[key]]<-TruthPercentageMap[[key]]+1/poolSize
}
}
getDistance<-function(predicted){
clonotypes=clonoNames(predicted)
abundance=clonoAbundance(predicted)
SumAbundance=sum(abundance)
distance=0
seen <- hashmap()
for(i in 1:length(abundance)){
if(is.null(TruthPercentageMap[[clonotypes[i]]])){
distance=distance+abundance[i]/SumAbundance
}
else{
seen[[clonotypes[i]]]<-TruthPercentageMap[[clonotypes[i]]]
distance=distance+abs(abundance[i]/SumAbundance-TruthPercentageMap[[clonotypes[i]]])
}
}
distance=distance+Reduce("+", values(TruthPercentageMap)) -Reduce("+", values(seen))
return(distance)
}
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:50){
samplelist=getSample(2000)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(EMpredicted)
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance(UNpredicted)
DistanceListFromUN[i]=distance2
print(i)
}
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
boxplot(DistanceListFromUN)
hist(DistanceListFromUN)
print(median(DistanceListFromEM))
print(median(DistanceListFromUN))
print(mean(DistanceListFromEM))
print(mean(DistanceListFromUN))
class(samplelist)
