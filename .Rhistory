Intermediate=getResultTable(200L,500L,1L)
Intermediate
time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
print(i)
time1=Sys.time()
print(time1-time0)
time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
Intermediate=getResultTable(200L,500L,1L)
Intermediate
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
poolSize=2000
SampleSize=5000
IndexnAnBMap=read.csv("IndexnAnBMap.csv",header = F)
IndexnAnBMap=as.matrix(IndexnAnBMap)
sce0 <- readRDS('toyTCRdata.rds')
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getMapRandomIntToIndex<-function(poolSize,Num_of_Repeat){
MapRandomIntToIndex=Num_of_Repeat
getRep <- function(x){
return(rep(x,MapRandomIntToIndex[x]))
}
MapRandomIntToIndex=sapply(1:poolSize,getRep,simplify = TRUE)
MapRandomIntToIndex=unlist(MapRandomIntToIndex)
MapLength=length(MapRandomIntToIndex)
return(MapRandomIntToIndex)
}
#MapRandomIntToIndex=getMapRandomIntToIndex(poolSize)
getSamplePool <- function(poolSize,MapRandomIntToIndex){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
#samplePool=getSamplePool(poolSize,MapRandomIntToIndex)
getClonotype<-function(clonotype_index, numberA, numberB, MapRandomIntToIndex, samplePool, errorProb = .01){
result=DataFrame()
MapLength=length(MapRandomIntToIndex)
indexInPool=sample.int(MapLength, 3, replace=FALSE)
indexInPool=MapRandomIntToIndex[indexInPool]
setAlpha <- hashset()
setBeta <- hashset()
if (numberA>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[2]]][1,])
insert(setAlpha,indexInPool[2])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][1,])
insert(setAlpha,indexInPool[1])
}
numberA=numberA-1
}
if (numberB>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[3]]][2,])
insert(setBeta,indexInPool[3])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][2,])
insert(setBeta,indexInPool[1])
}
numberB=numberB-1
}
while(numberA>0){
indexInPool=sample.int(MapLength, 1, replace=TRUE)
indexInPool=MapRandomIntToIndex[indexInPool]
while(setAlpha[indexInPool]==TRUE){
indexInPool=sample.int(MapLength, 1, replace=TRUE)
indexInPool=MapRandomIntToIndex[indexInPool]
}
insert(setAlpha,indexInPool)
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
while(numberB>0){
indexInPool=sample.int(MapLength, 1, replace=TRUE)
indexInPool=MapRandomIntToIndex[indexInPool]
while(setBeta[indexInPool]==TRUE){
indexInPool=sample.int(MapLength, 1, replace=TRUE)
indexInPool=MapRandomIntToIndex[indexInPool]
}
insert(setBeta,indexInPool)
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
return(result)
}
getSample <- function(samplesize,MapRandomIntToIndex,samplePool){
RandomIntegers <- sample(1:(length(IndexnAnBMap)/2), samplesize, replace=T)
barcode <- paste('cell', 1:samplesize)
sample <- lapply(1:samplesize, function(clonotype_index){
getClonotype(clonotype_index, IndexnAnBMap[RandomIntegers[clonotype_index],1], IndexnAnBMap[RandomIntegers[clonotype_index],2], MapRandomIntToIndex, samplePool)
})
sample <- SplitDataFrameList(sample)
sample[,'barcode'] <- barcode
sample[,'sample'] <- 'sim'
names(sample) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(sample)
}
# samplelist=getSample(SampleSize)
# EMpredicted <- clonoStats(samplelist, method = 'EM')
# UNpredicted <- clonoStats(samplelist, method = 'unique')
getMerged<-function(clonotype,abundance,merged){
stimulated<- data.frame(clonotype,abundance)
sum_abundance=sum(stimulated['abundance'])
stimulated['abundance']=stimulated['abundance']/sum_abundance
merged = merge(x = merged, y = stimulated, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
return(merged)
}
getResultTable <- function(poolSize,SampleSize,RepeatTimes){
Num_of_Repeat=rgeom(poolSize, .25)+1
MapRandomIntToIndex=getMapRandomIntToIndex(poolSize,Num_of_Repeat)
samplePool=getSamplePool(poolSize,MapRandomIntToIndex)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(Num_of_Repeat)
abundance=Num_of_Repeat/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool ), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
merged=realDF
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,MapRandomIntToIndex, samplePool)
EMpredicted <- clonoStats(samplelist, method = 'EM')
merged= getMerged(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],merged)
UNpredicted <- clonoStats(samplelist, method = 'unique')
merged= getMerged(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],merged)
}
ColumnNames=rep(c('EM','UN'),RepeatTimes)
ColumnIndexes=rep(1:RepeatTimes,each=2)
ColumnNames=paste(ColumnNames,ColumnIndexes,sep='_')
ColumnNames=c('clonotype','Real', ColumnNames)
names(merged)<-ColumnNames
return(merged)
}
#Intermediate=getResultTable(200,500,3)
getDistance_R<-function(clonotype,abundance,realDF){
stimulated<- data.frame(clonotype,abundance)
sum_abundance=sum(stimulated['abundance'])
stimulated['abundance']=stimulated['abundance']/sum_abundance
merged = merge(x = realDF, y = stimulated, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
return (sum(abs(merged['abundance.x']-merged['abundance.y'])))
}
Num_of_Repeat=rgeom(poolSize, .25)+1
MapRandomIntToIndex=getMapRandomIntToIndex(poolSize,Num_of_Repeat)
samplePool=getSamplePool(poolSize,MapRandomIntToIndex)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(Num_of_Repeat)
abundance=Num_of_Repeat/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool ), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
merged=realDF
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,MapRandomIntToIndex, samplePool)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
RepeatTimes=2
Num_of_Repeat=rgeom(poolSize, .25)+1
MapRandomIntToIndex=getMapRandomIntToIndex(poolSize,Num_of_Repeat)
samplePool=getSamplePool(poolSize,MapRandomIntToIndex)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(Num_of_Repeat)
abundance=Num_of_Repeat/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool ), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
merged=realDF
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,MapRandomIntToIndex, samplePool)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
poolSize=500
SampleSize=200
Num_of_Repeat=rgeom(poolSize, .25)+1
MapRandomIntToIndex=getMapRandomIntToIndex(poolSize,Num_of_Repeat)
samplePool=getSamplePool(poolSize,MapRandomIntToIndex)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(Num_of_Repeat)
abundance=Num_of_Repeat/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool ), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
merged=realDF
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,MapRandomIntToIndex, samplePool)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListFromUN[i]=distance2
}
Num_of_Repeat=rgeom(poolSize, .25)+1
MapRandomIntToIndex=getMapRandomIntToIndex(poolSize,Num_of_Repeat)
samplePool=getSamplePool(poolSize,MapRandomIntToIndex)
Num_of_Repeat=rgeom(poolSize, .25)+1
MapRandomIntToIndex=getMapRandomIntToIndex(poolSize,Num_of_Repeat)
samplePool=getSamplePool(poolSize,MapRandomIntToIndex)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(Num_of_Repeat)
abundance=Num_of_Repeat/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool ), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
merged=realDF
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,MapRandomIntToIndex, samplePool)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
DistanceListFromUN[i]=distance2
}
a=dataframe(DistanceListFromUN,DistanceListFromEM)
a=data.frame(DistanceListFromUN,DistanceListFromEM)
A
a
getDistanceDataFrame <- function(poolSize,SampleSize,RepeatTimes){
Num_of_Repeat=rgeom(poolSize, .25)+1
MapRandomIntToIndex=getMapRandomIntToIndex(poolSize,Num_of_Repeat)
samplePool=getSamplePool(poolSize,MapRandomIntToIndex)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(Num_of_Repeat)
abundance=Num_of_Repeat/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool ), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,MapRandomIntToIndex, samplePool)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
DistanceListFromUN[i]=distance2
}
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
ResultDistances=getDistanceDataFrame(200,500,10)
boxplot(ResultDistances$DistanceListFromEM)
hist(ResultDistances$DistanceListFromEM)
boxplot(ResultDistances$DistanceListFromUN)
hist(ResultDistances$DistanceListFromUN)
print(median(ResultDistances$DistanceListFromEM))
print(median(ResultDistances$DistanceListFromUN))
print(mean(ResultDistances$DistanceListFromEM))
print(mean(ResultDistances$DistanceListFromUN))
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c(
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c(
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c(
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
ResultDistances=getDistanceDataFrame(200,500,10)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
ResultDistances=getDistanceDataFrame(200L,500L,10L)
boxplot(ResultDistances$DistanceListFromEM)
hist(ResultDistances$DistanceListFromEM)
boxplot(ResultDistances$DistanceListFromUN)
hist(ResultDistances$DistanceListFromUN)
print(median(ResultDistances$DistanceListFromEM))
print(median(ResultDistances$DistanceListFromUN))
print(mean(ResultDistances$DistanceListFromEM))
print(mean(ResultDistances$DistanceListFromUN))
ResultDistances
