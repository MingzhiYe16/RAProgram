getEvaluationDataFrame <- function(poolSize,SampleSize,RepeatTimes){
DistributionOfClonotypes=1/(1:poolSize)
samplePool=getSamplePool(poolSize)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(DistributionOfClonotypes)
abundance=DistributionOfClonotypes/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceEM_UN=c()
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,DistributionOfClonotypes, samplePool, poolSize)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
DistanceListFromEM[i]=distance1
distance1=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
KLDivergenceListFromEM[i]=distance1
distance1=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
JSDivergenceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
DistanceListFromUN[i]=distance2
distance2=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
KLDivergenceListFromUN[i]=distance2
distance2=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
JSDivergenceListFromUN[i]=distance2
distance3=getDistanceEM_UN(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceEM_UN[i]=distance3
}
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceEM_UN))
}
ResultDistances=getEvaluationDataFrame(20,50,1)
ResultDistances
getDistanceEM_UN<-function(clonotype1,abundance1,clonotype2,abundance2){
stimulated1<- data.frame(clonotype1,abundance1)
stimulated2<- data.frame(clonotype2,abundance2)
sum_abundance1=sum(stimulated1['abundance1'])
sum_abundance2=sum(stimulated2['abundance2'])
# stimulated1['abundance1']=stimulated1['abundance1']/sum_abundance1
# stimulated2['abundance1']=stimulated2['abundance2']/sum_abundance2
colnames(stimulated1) <- c('clonotype','abundance')
colnames(stimulated2) <- c('clonotype','abundance')
merged = merge(x = stimulated1, y = stimulated2, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
return (sum(stimulated1['abundance'])+sum(stimulated2['abundance']))
# return (sum(abs(merged['abundance.x']-merged['abundance.y'])))
}
getEvaluationDataFrame <- function(poolSize,SampleSize,RepeatTimes){
DistributionOfClonotypes=1/(1:poolSize)
samplePool=getSamplePool(poolSize)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(DistributionOfClonotypes)
abundance=DistributionOfClonotypes/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceEM_UN=c()
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,DistributionOfClonotypes, samplePool, poolSize)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
DistanceListFromEM[i]=distance1
distance1=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
KLDivergenceListFromEM[i]=distance1
distance1=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
JSDivergenceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
DistanceListFromUN[i]=distance2
distance2=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
KLDivergenceListFromUN[i]=distance2
distance2=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
JSDivergenceListFromUN[i]=distance2
distance3=getDistanceEM_UN(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceEM_UN[i]=distance3
}
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceEM_UN))
}
ResultDistances=getEvaluationDataFrame(20,50,1)
ResultDistances
getDistanceEM_UN<-function(clonotype1,abundance1,clonotype2,abundance2){
stimulated1<- data.frame(clonotype1,abundance1)
stimulated2<- data.frame(clonotype2,abundance2)
colnames(stimulated1) <- c('clonotype','abundance')
colnames(stimulated2) <- c('clonotype','abundance')
sum_abundance1=sum(stimulated1['abundance'])
sum_abundance2=sum(stimulated2['abundance'])
stimulated1['abundance']=stimulated1['abundance']/sum_abundance1
stimulated2['abundance']=stimulated2['abundance']/sum_abundance2
merged = merge(x = stimulated1, y = stimulated2, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
return (sum(stimulated1['abundance'])+sum(stimulated2['abundance']))
# return (sum(abs(merged['abundance.x']-merged['abundance.y'])))
}
getEvaluationDataFrame <- function(poolSize,SampleSize,RepeatTimes){
DistributionOfClonotypes=1/(1:poolSize)
samplePool=getSamplePool(poolSize)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(DistributionOfClonotypes)
abundance=DistributionOfClonotypes/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceEM_UN=c()
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,DistributionOfClonotypes, samplePool, poolSize)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
DistanceListFromEM[i]=distance1
distance1=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
KLDivergenceListFromEM[i]=distance1
distance1=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
JSDivergenceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
DistanceListFromUN[i]=distance2
distance2=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
KLDivergenceListFromUN[i]=distance2
distance2=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
JSDivergenceListFromUN[i]=distance2
distance3=getDistanceEM_UN(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceEM_UN[i]=distance3
}
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceEM_UN))
}
ResultDistances=getEvaluationDataFrame(20,50,1)
ResultDistances
getDistanceEM_UN<-function(clonotype1,abundance1,clonotype2,abundance2){
stimulated1<- data.frame(clonotype1,abundance1)
stimulated2<- data.frame(clonotype2,abundance2)
colnames(stimulated1) <- c('clonotype','abundance')
colnames(stimulated2) <- c('clonotype','abundance')
sum_abundance1=sum(stimulated1['abundance'])
sum_abundance2=sum(stimulated2['abundance'])
stimulated1['abundance']=stimulated1['abundance']/sum_abundance1
stimulated2['abundance']=stimulated2['abundance']/sum_abundance2
merged = merge(x = stimulated1, y = stimulated2, by = "clonotype",all = TRUE)
merged[is.na(merged)] <- 0
# return (sum(stimulated1['abundance'])+sum(stimulated2['abundance']))
return (sum(abs(merged['abundance.x']-merged['abundance.y'])))
}
getEvaluationDataFrame <- function(poolSize,SampleSize,RepeatTimes){
DistributionOfClonotypes=1/(1:poolSize)
samplePool=getSamplePool(poolSize)
# Generate the dataframe recording the abundance for each clonotype in the sample pool
clonotypes_in_pool=samplePool[,'cdr3']
concatCDR3<-function(x){
res=paste(x[1],x[2],sep=' ')
res=paste(x[1],x[2],sep=' ')
return(res)
}
clonotypes_in_pool=lapply(clonotypes_in_pool,concatCDR3)
clonotypes_in_pool=unlist(clonotypes_in_pool)
Sum_of_Repeat=sum(DistributionOfClonotypes)
abundance=DistributionOfClonotypes/Sum_of_Repeat
realDF<- data.frame(clonotypes_in_pool,abundance)
rownames(realDF) <- NULL
realDF=aggregate(realDF$abundance, by=list(clonotype=realDF$clonotypes_in_pool), FUN=sum)
colnames(realDF) <- c('clonotype','abundance')
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceEM_UN=c()
for(i in 1:RepeatTimes){
samplelist=getSample(SampleSize,DistributionOfClonotypes, samplePool, poolSize)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance_R(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
DistanceListFromEM[i]=distance1
distance1=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
KLDivergenceListFromEM[i]=distance1
distance1=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1],realDF)
JSDivergenceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance_R(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
DistanceListFromUN[i]=distance2
distance2=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
KLDivergenceListFromUN[i]=distance2
distance2=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],realDF)
JSDivergenceListFromUN[i]=distance2
distance3=getDistanceEM_UN(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
DistanceEM_UN[i]=distance3
}
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceEM_UN))
}
ResultDistances=getEvaluationDataFrame(20,50,1)
ResultDistances
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM))
}
ResultDistances=getEvaluationDataFrame(20L,50L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=1
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=1
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM))
}
ResultDistances=getEvaluationDataFrame(20L,50L,1L)
ResultDistances
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=1
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=1
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM))
}
ResultDistances=getEvaluationDataFrame(20L,50L,1L)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#JSDivergenceListFromEM[i]=1
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#JSDivergenceListFromUN[i]=1
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM))
}
ResultDistances=getEvaluationDataFrame(20L,50L,1L)
ResultDistances
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceUN_EM(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(20L,50L,1L)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_virtualenv('C:/Users/yemin/PycharmProjects/RAProject/venv')
source_python("./main.py")
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceUN_EM(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(20L,50L,1L)
ResultDistances
