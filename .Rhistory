sample$high_confidence
a=sample$high_confidence
a
b=c(1,2)
array(b)
b=array(b)
b
b=c(b)
b
class(b)
b=array(b)
class(b)
class(a)
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_python('/usr/local/bin/python3')
source_python("./main.py")
#time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
# ResultDistances=getDistanceDataFrame(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
samplelist$high_confidence <- as.logical(samplelist$high_confidence)
samplelist$productive<-as.logical(samplelist$productive)
samplelist$full_length<-as.logical(samplelist$full_length)
samplelist$is_cell<-as.logical(samplelist$is_cell)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceTwoSamples(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(10000L,1000L,10L)
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_python('/usr/local/bin/python3')
source_python("./main.py")
#time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
# ResultDistances=getDistanceDataFrame(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
#samplelist$high_confidence <- as.logical(samplelist$high_confidence)
#samplelist$productive<-as.logical(samplelist$productive)
#samplelist$full_length<-as.logical(samplelist$full_length)
#samplelist$is_cell<-as.logical(samplelist$is_cell)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceTwoSamples(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(10000L,1000L,10L)
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_python('/usr/local/bin/python3')
source_python("./main.py")
#time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
# ResultDistances=getDistanceDataFrame(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence <- as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceTwoSamples(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(10000L,1000L,10L)
samplelist <- split(sample, f = sample$barcode)
sample=getSample(PoolSize,SampleSize)
samplelist <- split(sample, f = sample$barcode)
class(sample)
samplelist <- split(sample, f = sample$barcode)
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_python('/usr/local/bin/python3')
# use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_python('/usr/local/bin/python3')
# use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
#time0=Sys.time()
getResultTable <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
updateMergedDataframe(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
updateMergedDataframe(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
result=getIntermediateResult(Times)
clearStorage()
return(result)
}
#Intermediate=getResultTable(200L,500L,1L)
#time0=Sys.time()
getDistanceDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence<-as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM))
}
# ResultDistances=getDistanceDataFrame(200L,500L,1L)
#time0=Sys.time()
getEvaluationDataFrame <- function(PoolSize,SampleSize,Times){
generateSamplePool(PoolSize)
DistanceListFromEM=c()
DistanceListFromUN=c()
KLDivergenceListFromEM=c()
KLDivergenceListFromUN=c()
JSDivergenceListFromEM=c()
JSDivergenceListFromUN=c()
DistanceListUN_EM=c()
for(i in 1:Times){
sample=getSample(PoolSize,SampleSize)
sample$high_confidence <- as.logical(sample$high_confidence)
sample$productive<-as.logical(sample$productive)
sample$full_length<-as.logical(sample$full_length)
sample$is_cell<-as.logical(sample$is_cell)
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
EMpredicted <- clonoStats(samplelist, method = 'EM')
DistanceListFromEM[i]=getDistance(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
KLDivergenceListFromEM[i]=getKLDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
JSDivergenceListFromEM[i]=getJSDivergence(clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
UNpredicted <- clonoStats(samplelist, method = 'unique')
DistanceListFromUN[i]=getDistance(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
KLDivergenceListFromUN[i]=getKLDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
JSDivergenceListFromUN[i]=getJSDivergence(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1])
DistanceListUN_EM[i]=getDistanceTwoSamples(clonoNames(UNpredicted),clonoAbundance(UNpredicted)[,1],clonoNames(EMpredicted),clonoAbundance(EMpredicted)[,1])
#print(i)
#time1=Sys.time()
#print(time1-time0)
#time0=time1
}
clearStorage()
return(data.frame(DistanceListFromUN,DistanceListFromEM,KLDivergenceListFromUN,KLDivergenceListFromEM,JSDivergenceListFromUN,JSDivergenceListFromEM,DistanceListUN_EM))
}
ResultDistances=getEvaluationDataFrame(10000L,1000L,10L)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
View | Show Toolbar
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
knitr::opts_chunk$set(echo = TRUE)
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
#use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
#use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
#use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
#use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
#use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
#use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
#use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
use_python('/usr/local/bin/python3')
source_python("./main.py")
use_python('/usr/local/bin/python3')
source_python("./main.py")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
#use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
#use_python('/usr/local/bin/python3')
use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
library(reticulate)
use_python('/usr/local/bin/python3')
#use_virtualenv("/Users/mingzhiye/PycharmProjects/pythonProject/venv")
source_python("./main.py")
