IndexnAnBMap=cbind(DistributeTRA,DistributeTRB)
RandomIntegers <- sample(1:poolSize, samplesize, replace=T)
barcode <- paste('cell', 1:samplesize)
sample <- lapply(1:samplesize, function(clonotype_index){
getClonotype(clonotype_index, IndexnAnBMap[RandomIntegers[clonotype_index],1], IndexnAnBMap[RandomIntegers[clonotype_index],2])
})
sample <- SplitDataFrameList(sample)
sample[,'barcode'] <- barcode
sample[,'sample'] <- 'sim'
names(sample) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(sample)
}
# samplelist=getSample(SampleSize)
# EMpredicted <- clonoStats(samplelist, method = 'EM')
# UNpredicted <- clonoStats(samplelist, method = 'unique')
TruthPercentageMap=hashmap()
for(i in 1:poolSize){
key=paste(samplePool[[i]]$cdr3[1],samplePool[[i]]$cdr3[2],sep=' ')
if(is.null(TruthPercentageMap[[key]])){
TruthPercentageMap[[key]]<-1/poolSize
}
else{
TruthPercentageMap[[key]]<-TruthPercentageMap[[key]]+1/poolSize
}
}
getDistance<-function(predicted){
clonotypes=clonoNames(predicted)
abundance=clonoAbundance(predicted)
SumAbundance=sum(abundance)
distance=0
seen <- hashmap()
for(i in 1:length(abundance)){
if(is.null(TruthPercentageMap[[clonotypes[i]]])){
distance=distance+abundance[i]/SumAbundance
}
else{
seen[[clonotypes[i]]]<-TruthPercentageMap[[clonotypes[i]]]
distance=distance+abs(abundance[i]/SumAbundance-TruthPercentageMap[[clonotypes[i]]])
}
}
distance=distance+Reduce("+", values(TruthPercentageMap)) -Reduce("+", values(seen))
return(distance)
}
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:10){
samplelist=getSample(1000)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(EMpredicted)
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance(UNpredicted)
DistanceListFromUN[i]=distance2
print(i)
}
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
boxplot(DistanceListFromUN)
hist(DistanceListFromUN)
print(median(DistanceListFromEM))
print(median(DistanceListFromUN))
print(mean(DistanceListFromEM))
print(mean(DistanceListFromUN))
SamplePool[[1]]$cdr3
samplePool[[1]]$cdr3
samplePool[[1]]$cdr3_nt
cdr3=sample(AmiNoAcids,10, replace=T)
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
cdr3=sample(AmiNoAcids,10, replace=T)
cdr3
samplePool[[1]]$cdr3
samplePool[[1]]$cdr3[1]
class(samplePool[[1]]$cdr3[1])
class(cdr3[1])
class(cdr3)
paste(cdr3)
paste(cdr3,collapse = '')
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getSamplePool <- function(poolSize){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
getCDR3 <- function(poolSize){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
getCDR3()
A=C(1,2)
a=c(1,2)
a[1]='asd'
a
lapply(a,getCDR3)
lapply(12,getCDR3)
lapply(12,getCDR3())
lapply(a,getCDR3())
lapply(a,getCDR3
)
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
lapply(a,getCDR3)
alpha_pool=lapply(1:poolSize,getCDR3)
alpha_pool
alpha_pool[1]
sapply(1:poolSize,getCDR3,simplify = TRUE)
alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
alpha_pool
alpha_pool[1]
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
CDR_Alpha\
CDR_Alpha
sce0$contigs
sce0$contigs[[1]]
sce0$contigs[[4]]
sce0$contigs[[4]][1,]
sce0$contigs[[4]][1:2,]
sce0$contigs[[4]][2:3,]
sce0$contigs[[4]][1:3,]
sce0$contigs[[4]][c(1,3),]
TemplateClonotype=sce0$contigs[[4]][c(1,3),]
TemplateClonotype$cdr3[1]
result=TemplateClonotype
TemplateClonotype$cdr3[1]='qwe'
result$cdr3[1]='qwe'
TemplateClonotype=sce0$contigs[[4]][c(1,3),]
result=TemplateClonotype
result$cdr3[1]='qwe'
result$cdr3[1]
TemplateClonotype$cdr3[1]
knitr::opts_chunk$set(echo = TRUE)
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
poolSize=1000
TemplateClonotype=sce0$contigs[[4]][c(1,3),]
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
samplePool=DataFrame()
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(poolSize)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
# metadata(sce)$clonoStats
# clonoAbundance(sce)
# clonoFrequency(sce)
# EMstats <- clonoStats(sce, method = "EM")
#
# EMstats2=metadata(EMstats)$clonoStats
# barVDJ(EMstats2, title = "contigs", legend = TRUE)
# abundanceVDJ(EMstats2)
sce0 <- readRDS('toyTCRdata.rds')
sce <- clonoStats(sce0, method = 'EM')
#A<-sce0$contigs[sce0$contigs[, 'chain'] %in% c('TRA','TRB')]
for (i in 1:length(sce0$contigs)){
#sce0$contigs[[i]]  "DFrame"  "S4Vectors"
#sce0$contigs[[i]]<-sce0$contigs[[i]] %>% filter(chain %in% c("TRA","TRB"))
#sce0$contigs[[i]]<-sce0$contigs[[i]][filter(sce0$contigs[[i]]$chain %in% c("TRA","TRB")),]
sce0$contigs[[i]]<-sce0$contigs[[i]][order(sce0$contigs[[i]]$chain),]
}
sce0 <- readRDS('toyTCRdata.rds')
sce <- clonoStats(sce0, method = 'EM')
#A<-sce0$contigs[sce0$contigs[, 'chain'] %in% c('TRA','TRB')]
# for (i in 1:length(sce0$contigs)){
#   #sce0$contigs[[i]]  "DFrame"  "S4Vectors"
#   #sce0$contigs[[i]]<-sce0$contigs[[i]] %>% filter(chain %in% c("TRA","TRB"))
#   #sce0$contigs[[i]]<-sce0$contigs[[i]][filter(sce0$contigs[[i]]$chain %in% c("TRA","TRB")),]
#   sce0$contigs[[i]]<-sce0$contigs[[i]][order(sce0$contigs[[i]]$chain),]
#
# }
sce0$contigs[[4]]
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
TemplateClonotype
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
poolSize=1000
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(10)
samplePool
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
poolSize=1000
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(1000)
getClonotype<-function(clonotype_index, numberA, numberB, errorProb = .01){
result=DataFrame()
indexInPool=sample.int(poolSize, 3, replace=FALSE)
if (numberA>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[2]]][1,])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][1,])
}
numberA=numberA-1
}
if (numberB>=1){
if(runif(1) < errorProb){
result=rbind(result,samplePool[[indexInPool[3]]][2,])
}else{
result=rbind(result,samplePool[[indexInPool[1]]][2,])
}
numberB=numberB-1
}
while(numberA>0 | numberB>0){
indexInPool=sample.int(poolSize, 1, replace=TRUE)
if (numberA>=1){
result=rbind(result,samplePool[[indexInPool]][1,])
numberA=numberA-1
}
else{
result=rbind(result,samplePool[[indexInPool]][2,])
numberB=numberB-1
}
}
return(result)
}
getSample <- function(samplesize){
sample=DataFrame()
DistributeTRA=sum(sce0$contigs[,'chain']=='TRA')
DistributeTRB=sum(sce0$contigs[,'chain']=='TRB')
# table(DistributeTRA,DistributeTRB)
IndexnAnBMap=cbind(DistributeTRA,DistributeTRB)
RandomIntegers <- sample(1:poolSize, samplesize, replace=T)
barcode <- paste('cell', 1:samplesize)
sample <- lapply(1:samplesize, function(clonotype_index){
getClonotype(clonotype_index, IndexnAnBMap[RandomIntegers[clonotype_index],1], IndexnAnBMap[RandomIntegers[clonotype_index],2])
})
sample <- SplitDataFrameList(sample)
sample[,'barcode'] <- barcode
sample[,'sample'] <- 'sim'
names(sample) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(sample)
}
# samplelist=getSample(SampleSize)
# EMpredicted <- clonoStats(samplelist, method = 'EM')
# UNpredicted <- clonoStats(samplelist, method = 'unique')
TruthPercentageMap=hashmap()
for(i in 1:poolSize){
key=paste(samplePool[[i]]$cdr3[1],samplePool[[i]]$cdr3[2],sep=' ')
if(is.null(TruthPercentageMap[[key]])){
TruthPercentageMap[[key]]<-1/poolSize
}
else{
TruthPercentageMap[[key]]<-TruthPercentageMap[[key]]+1/poolSize
}
}
getDistance<-function(predicted){
clonotypes=clonoNames(predicted)
abundance=clonoAbundance(predicted)
SumAbundance=sum(abundance)
distance=0
seen <- hashmap()
for(i in 1:length(abundance)){
if(is.null(TruthPercentageMap[[clonotypes[i]]])){
distance=distance+abundance[i]/SumAbundance
}
else{
seen[[clonotypes[i]]]<-TruthPercentageMap[[clonotypes[i]]]
distance=distance+abs(abundance[i]/SumAbundance-TruthPercentageMap[[clonotypes[i]]])
}
}
distance=distance+Reduce("+", values(TruthPercentageMap)) -Reduce("+", values(seen))
return(distance)
}
DistanceListFromEM=c()
DistanceListFromUN=c()
for(i in 1:10){
samplelist=getSample(1000)
EMpredicted <- clonoStats(samplelist, method = 'EM')
distance1=getDistance(EMpredicted)
DistanceListFromEM[i]=distance1
UNpredicted <- clonoStats(samplelist, method = 'unique')
distance2=getDistance(UNpredicted)
DistanceListFromUN[i]=distance2
print(i)
}
boxplot(DistanceListFromEM)
hist(DistanceListFromEM)
boxplot(DistanceListFromUN)
hist(DistanceListFromUN)
print(median(DistanceListFromEM))
print(median(DistanceListFromUN))
print(mean(DistanceListFromEM))
print(mean(DistanceListFromUN))
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
# metadata(sce)$clonoStats
# clonoAbundance(sce)
# clonoFrequency(sce)
# EMstats <- clonoStats(sce, method = "EM")
#
# EMstats2=metadata(EMstats)$clonoStats
# barVDJ(EMstats2, title = "contigs", legend = TRUE)
# abundanceVDJ(EMstats2)
sce0 <- readRDS('toyTCRdata.rds')
sce <- clonoStats(sce0, method = 'EM')
#A<-sce0$contigs[sce0$contigs[, 'chain'] %in% c('TRA','TRB')]
# for (i in 1:length(sce0$contigs)){
#   #sce0$contigs[[i]]  "DFrame"  "S4Vectors"
#   #sce0$contigs[[i]]<-sce0$contigs[[i]] %>% filter(chain %in% c("TRA","TRB"))
#   #sce0$contigs[[i]]<-sce0$contigs[[i]][filter(sce0$contigs[[i]]$chain %in% c("TRA","TRB")),]
#   sce0$contigs[[i]]<-sce0$contigs[[i]][order(sce0$contigs[[i]]$chain),]
#
# }
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
poolSize=1000
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(1000)
samplePool
getSample(50000)
poolSize=25000
samplePool=getSamplePool(30000)
samplePool
saveRDS(samplePool)
saveRDS(samplePool,"sample")
UNpredicted <- clonoStats(samplelist, method = 'unique')
samplelist
UNpredicted
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
# metadata(sce)$clonoStats
# clonoAbundance(sce)
# clonoFrequency(sce)
# EMstats <- clonoStats(sce, method = "EM")
#
# EMstats2=metadata(EMstats)$clonoStats
# barVDJ(EMstats2, title = "contigs", legend = TRUE)
# abundanceVDJ(EMstats2)
sce0 <- readRDS('toyTCRdata.rds')
sce <- clonoStats(sce0, method = 'EM')
#A<-sce0$contigs[sce0$contigs[, 'chain'] %in% c('TRA','TRB')]
# for (i in 1:length(sce0$contigs)){
#   #sce0$contigs[[i]]  "DFrame"  "S4Vectors"
#   #sce0$contigs[[i]]<-sce0$contigs[[i]] %>% filter(chain %in% c("TRA","TRB"))
#   #sce0$contigs[[i]]<-sce0$contigs[[i]][filter(sce0$contigs[[i]]$chain %in% c("TRA","TRB")),]
#   sce0$contigs[[i]]<-sce0$contigs[[i]][order(sce0$contigs[[i]]$chain),]
#
# }
poolSize=30000
SampleSize=50000
AmiNoAcids=c('A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V')
getCDR3 <- function(x){
cdr3=sample(AmiNoAcids,15, replace=T)
return(paste(cdr3,collapse = ''))
}
TemplateClonotype=sce0$contigs[[4]][c(2,1),]
getClonotypeForPool<-function(clonotype_index, CDRAlpha, CDRBeta){
result=TemplateClonotype
result$cdr3[1]=CDRAlpha
result$cdr3[2]=CDRBeta
return(result)
}
getSamplePool <- function(poolSize){
Alpha_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
Beta_pool=sapply(1:poolSize,getCDR3,simplify = TRUE)
CDR_Alpha=sample(Alpha_pool,poolSize, replace=T)
CDR_Beta=sample(Beta_pool,poolSize, replace=T)
barcode <- paste('cell', 1:poolSize)
samplePool <- lapply(1:poolSize, function(clonotype_index){
getClonotypeForPool(clonotype_index, CDR_Alpha[clonotype_index], CDR_Beta[clonotype_index])
})
samplePool <- SplitDataFrameList(samplePool)
samplePool[,'barcode'] <- barcode
samplePool[,'sample'] <- 'sim'
names(samplePool) <- barcode
# sample1<-as(sample,'SplitDFrameList')
return(samplePool)
}
samplePool=getSamplePool(poolSize)
samplePool
sample=read.csv("sample.csv", header = TRUE, sep = ",")
sample=read.csv("sample.csv", header = TRUE, sep = ",")
getwdw
getwd
getwd()
setwd("C:/Users/yemin/R_Projects/RAprogram")
sample=read.csv("sample.csv", header = TRUE, sep = ",")
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
knitr::opts_chunk$set(echo = TRUE)
library(VDJdive)
library(tidyverse)
require(SingleCellExperiment)
library(r2r)
# metadata(sce)$clonoStats
# clonoAbundance(sce)
# clonoFrequency(sce)
# EMstats <- clonoStats(sce, method = "EM")
#
# EMstats2=metadata(EMstats)$clonoStats
# barVDJ(EMstats2, title = "contigs", legend = TRUE)
# abundanceVDJ(EMstats2)
sample=read.csv("sample.csv", header = TRUE, sep = ",")
samplelist <- split(sample, f = sample$barcode)
samplelist  <- SplitDataFrameList(samplelist)
clonoStats(samplelist, method = 'EM')
clonoStats(samplelist, method = 'unique')
